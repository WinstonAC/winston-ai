// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  userSettings  UserSettings?
  accounts      Account[]
  sessions      Session[]
  leads         Lead[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  templates     Template[]
  sharedTemplates TemplateShare[]
  team          Team?     @relation(fields: [teamId], references: [id])
  teamId        String?
  teamRole      String?   @default("MEMBER") // OWNER, ADMIN, MEMBER
  sentInvites   TeamInvite[] @relation("SentInvites")
  segments      Segment[]
  campaigns     Campaign[]
  performanceMetrics PerformanceMetrics[]
  errorLogs     ErrorLog[]
  apiMetrics    ApiMetrics[]
}

model UserSettings {
  id              String          @id @default(cuid())
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailSignature  String?
  defaultTemplate String?
  templates       Json?           // Stores email templates as JSON
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lead {
  id            String    @id @default(cuid())
  name          String
  email         String
  status        String    @default("Sent")
  classification String?
  sent_at       DateTime  @default(now())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  team          Team?     @relation(fields: [teamId], references: [id])
  teamId        String?
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  activities    Activity[]
  emailHistory  EmailHistory[]
  segments      Segment[]
}

model EmailHistory {
  id          String    @id @default(cuid())
  leadId      String
  lead        Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  subject     String
  body        String    @db.Text
  templateId  String?
  sentAt      DateTime  @default(now())
  openedAt    DateTime?
  clickedAt   DateTime?
  bounced     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Template {
  id            String    @id @default(cuid())
  name          String
  subject       String
  body          String    @db.Text
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String    // User ID
  user          User      @relation(fields: [createdBy], references: [id])
  sharedWith    TemplateShare[]
  assets        TemplateAsset[]
  campaigns     Campaign[]
}

model TemplateShare {
  id          String    @id @default(cuid())
  templateId  String
  template    Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  permission  String    // 'view', 'edit', 'admin'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TemplateAsset {
  id          String    @id @default(cuid())
  type        String    // 'image', 'video'
  url         String
  name        String
  size        Int
  mimeType    String
  templateId  String?
  template    Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Team {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  settings    TeamSettings?
  invites     TeamInvite[]
  activities  Activity[]
  leads       Lead[]
  segments    Segment[]
  campaigns   Campaign[]
}

model TeamSettings {
  id          String    @id @default(cuid())
  teamId      String    @unique
  team        Team      @relation(fields: [teamId], references: [id])
  maxUsers    Int       @default(5)
  plan        String    @default("FREE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TeamInvite {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  invitedBy String
  user      User     @relation("SentInvites", fields: [invitedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
}

model Activity {
  id        String   @id @default(cuid())
  type      String   // e.g., "lead_created", "meeting_scheduled", "email_sent"
  createdAt DateTime @default(now())
  
  // Relations
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  lead      Lead     @relation(fields: [leadId], references: [id])
  leadId    String

  @@index([teamId])
  @@index([leadId])
}

model ChatbotInteraction {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  timestamp DateTime @default(now())
  command   String
  response  String
  success   Boolean
  page      String
  userRole  String
  teamId    String?
  duration  Int

  @@index([userId])
  @@index([sessionId])
  @@index([timestamp])
}

model Segment {
  id          String    @id @default(cuid())
  name        String
  description String
  filters     Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
  leads       Lead[]
  campaigns   Campaign[]

  @@index([userId])
  @@index([teamId])
}

model Campaign {
  id            String    @id @default(cuid())
  name          String
  description   String
  templateId    String
  template      Template  @relation(fields: [templateId], references: [id])
  segmentId     String
  segment       Segment   @relation(fields: [segmentId], references: [id])
  status        String    @default("draft")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  team          Team?     @relation(fields: [teamId], references: [id])
  teamId        String?
  schedule      CampaignSchedule?
  metrics       CampaignMetrics?
  targetAudience TargetAudience?

  @@index([userId])
  @@index([teamId])
  @@index([status])
  @@index([createdAt])
  @@index([segmentId])
}

model TargetAudience {
  id          String    @id @default(cuid())
  filters     Json
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CampaignSchedule {
  id          String    @id @default(cuid())
  type        String    // 'immediate' | 'scheduled'
  date        DateTime?
  time        String?
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CampaignMetrics {
  id          String    @id @default(cuid())
  sent        Int       @default(0)
  delivered   Int       @default(0)
  opened      Int       @default(0)
  clicked     Int       @default(0)
  bounced     Int       @default(0)
  replied     Int       @default(0)
  meetings    Int       @default(0)
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PerformanceMetrics {
  id                Int      @id @default(autoincrement())
  pageLoadTime      Float
  apiResponseTime   Float
  databaseQueryTime Float
  memoryUsage       Float
  cpuUsage          Float?
  networkLatency    Float?
  userId            String?
  user              User?    @relation(fields: [userId], references: [id])
  path              String?
  timestamp         DateTime @default(now())

  @@index([timestamp])
  @@index([userId])
}

model ErrorLog {
  id          Int      @id @default(autoincrement())
  message     String
  stack       String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  path        String?
  method      String?
  statusCode  Int?
  userAgent   String?
  browser     String?
  os          String?
  severity    String   @default("error") // error, warning, info
  environment String?  // development, staging, production
  timestamp   DateTime @default(now())

  @@index([timestamp])
  @@index([userId])
  @@index([severity])
  @@index([environment])
}

model ApiMetrics {
  id            Int      @id @default(autoincrement())
  endpoint      String
  method        String
  responseTime  Float
  statusCode    Int
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  requestSize   Int?
  responseSize  Int?
  error         String?
  timestamp     DateTime @default(now())

  @@index([timestamp])
  @@index([userId])
  @@index([endpoint])
  @@index([statusCode])
}
