// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  settings      Settings?
  accounts      Account[]
  sessions      Session[]
  leads         Lead[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  templates     Template[]
  sharedTemplates TemplateShare[]
  team          Team?     @relation(fields: [teamId], references: [id])
  teamId        String?
  teamRole      String?   @default("MEMBER") // OWNER, ADMIN, MEMBER
}

model UserSettings {
  id              String          @id @default(cuid())
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailSignature  String?
  defaultTemplate String?
  templates       Json?           // Stores email templates as JSON
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lead {
  id             String         @id @default(cuid())
  name           String
  email          String        @unique
  company        String?
  position       String?
  phone          String?
  status         String        @default("Pending")
  classification String?
  notes          String?       @db.Text
  sentAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  emailHistory   EmailHistory[]
}

model EmailHistory {
  id          String    @id @default(cuid())
  leadId      String
  lead        Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  subject     String
  body        String    @db.Text
  templateId  String?
  sentAt      DateTime  @default(now())
  openedAt    DateTime?
  clickedAt   DateTime?
  bounced     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Template {
  id            String    @id @default(cuid())
  name          String
  subject       String
  body          String    @db.Text
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String    // User ID
  user          User      @relation(fields: [createdBy], references: [id])
  sharedWith    TemplateShare[]
  assets        TemplateAsset[]
}

model TemplateShare {
  id          String    @id @default(cuid())
  templateId  String
  template    Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  permission  String    // 'view', 'edit', 'admin'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TemplateAsset {
  id          String    @id @default(cuid())
  type        String    // 'image', 'video'
  url         String
  name        String
  size        Int
  mimeType    String
  templateId  String?
  template    Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Team {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  settings    TeamSettings?
}

model TeamSettings {
  id          String    @id @default(cuid())
  teamId      String    @unique
  team        Team      @relation(fields: [teamId], references: [id])
  maxUsers    Int       @default(5)
  plan        String    @default("FREE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TeamInvite {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  invitedBy String
  user      User     @relation(fields: [invitedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
}
